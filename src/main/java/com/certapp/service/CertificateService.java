package com.certapp.service;

import com.certapp.model.Certificate;
import com.certapp.repository.CertificateRepository;
import com.certapp.service.LetsEncryptService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.List;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.concurrent.ExecutorService;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
@RequiredArgsConstructor
public class CertificateService {
    private final CertificateRepository certificateRepository;
    private final LetsEncryptService letsEncryptService;
    
    @Transactional(readOnly = true)
    public List<Certificate> getList() {
        return certificateRepository.findAll();
    }
    
    @Transactional(readOnly = true)
    public Certificate getById(Long id) {
        return certificateRepository.findById(id)
            .orElseThrow(() -> new RuntimeException("证书不存在"));
    }
    
    @Transactional
    public Certificate apply(Certificate certificate) {
        return certificateRepository.save(certificate);
    }
    
    @Transactional
    public Certificate oneClickApply(Certificate request) {
        log.debug("开始处理证书申请: {}", request.getName());
        try {
            letsEncryptService.requestCertificate(request.getName());
            log.info("Let's Encrypt证书申请成功: {}", request.getName());
            
            request.setStatus("GENERATED");
            request.setDescription("Certificate generated by Let's Encrypt");
            
            Certificate saved = certificateRepository.save(request);
            log.info("证书信息保存成功: id={}", saved.getId());
            return saved;
        } catch (Exception e) {
            log.error("证书申请失败: domain=" + request.getName(), e);
            throw new RuntimeException("证书申请失败", e);
        }
    }
} 